plugins {
	id 'org.springframework.boot' version '2.6.9'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.4.0.2513"
	id 'jacoco'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

sonarqube {
	properties {
		property "sonar.projectKey", "naneun_small-talk"
		property "sonar.organization", "snoarcloud-small-talk"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}

group = 'com.naneun'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {

	// Web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// H2 Database
	runtimeOnly 'com.h2database:h2'

	// mysql
	runtimeOnly 'mysql:mysql-connector-java'

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// TestContainer
	testImplementation 'org.testcontainers:testcontainers:1.17.5'
	testImplementation 'org.testcontainers:junit-jupiter:1.17.5'
	testImplementation 'org.testcontainers:mysql:1.17.5'

	// Add MockMvc dependency for Test Scope
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// Mockito
	testImplementation "org.mockito:mockito-core"
	testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

	// Asciidoctor
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	//Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jpa"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Configuration-processor
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

tasks.named('test') {
	useJUnitPlatform()
}

// Jacoco
test {
	useJUnitPlatform() // for JUnit5
	finalizedBy 'jacocoTestReport'
}

jacoco {
	toolVersion = '0.8.8'
}

jacocoTestReport {
	dependsOn test
	reports {
		html.enabled true
		xml.enabled true
		csv.enabled true

		html.destination file("src/jacoco/jacoco.html")
		xml.destination file("src/jacoco/jacoco.xml")
	}

	def Qdomains = []
	for(qPattern in "**/QA" .. "**/QZ"){
		Qdomains.add(qPattern+"*")
	}

	afterEvaluate {

		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [] + Qdomains)
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	def Qdomains = []

	for (qPattern in '*.QA'..'*.QZ') {
		Qdomains.add(qPattern + '*')
	}

	violationRules {
		rule {
			element = 'CLASS'
			enabled = true

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			excludes = [] + Qdomains
		}
	}
}

// RestDocs
ext {
	snippetsDir = file('build/generated-snippets')
}

// 1
tasks.named('asciidoctor') {
	configurations 'asciidoctorExt'
	inputs.dir snippetsDir
	dependsOn test
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

// 2
bootJar {
	// Check for documentation generation before build
	dependsOn asciidoctor
	// Copy the generated documentation to static/docs
	copy {
		from "${asciidoctor.outputDir}"
		into 'BOOT-INF/classes/static/docs'
//		into "${sourceSets.main.output.resourcesDir}/static/docs"
	}
	finalizedBy 'copyDocument'
}

// 3
task copyDocument(type: Copy) {
	dependsOn bootJar
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}

// QueryDsl
clean {
	delete file('src/main/generated')
}
